//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServices.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestStep4Services", Namespace="http://schemas.datacontract.org/2004/07/MarsTestFrame.CommuniteServer")]
    [System.SerializableAttribute()]
    public partial class TestStep4Services : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeywordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LoopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuickAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Row_ColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RunIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.ServiceReference1.SubTestInfo4Services SubTestInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Keyword {
            get {
                return this.KeywordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordField, value) != true)) {
                    this.KeywordField = value;
                    this.RaisePropertyChanged("Keyword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Loop {
            get {
                return this.LoopField;
            }
            set {
                if ((this.LoopField.Equals(value) != true)) {
                    this.LoopField = value;
                    this.RaisePropertyChanged("Loop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjectName {
            get {
                return this.ObjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectNameField, value) != true)) {
                    this.ObjectNameField = value;
                    this.RaisePropertyChanged("ObjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuickAccess {
            get {
                return this.QuickAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.QuickAccessField, value) != true)) {
                    this.QuickAccessField = value;
                    this.RaisePropertyChanged("QuickAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Row_Column {
            get {
                return this.Row_ColumnField;
            }
            set {
                if ((object.ReferenceEquals(this.Row_ColumnField, value) != true)) {
                    this.Row_ColumnField = value;
                    this.RaisePropertyChanged("Row_Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RunID {
            get {
                return this.RunIDField;
            }
            set {
                if ((this.RunIDField.Equals(value) != true)) {
                    this.RunIDField = value;
                    this.RaisePropertyChanged("RunID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.ServiceReference1.SubTestInfo4Services SubTestInfo {
            get {
                return this.SubTestInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.SubTestInfoField, value) != true)) {
                    this.SubTestInfoField = value;
                    this.RaisePropertyChanged("SubTestInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubTestInfo4Services", Namespace="http://schemas.datacontract.org/2004/07/MarsTestFrame.CommuniteServer")]
    [System.SerializableAttribute()]
    public partial class SubTestInfo4Services : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.ServiceReference1.TestStep4Services[] SubActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string keywordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.ServiceReference1.TestStep4Services[] SubActions {
            get {
                return this.SubActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubActionsField, value) != true)) {
                    this.SubActionsField = value;
                    this.RaisePropertyChanged("SubActions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keyword {
            get {
                return this.keywordField;
            }
            set {
                if ((object.ReferenceEquals(this.keywordField, value) != true)) {
                    this.keywordField = value;
                    this.RaisePropertyChanged("keyword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMonitorService", CallbackContract=typeof(TestServices.ServiceReference1.IMonitorServiceCallback))]
    public interface IMonitorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnClientTestSuiteTestCaseNamesChangeEvent", ReplyAction="http://tempuri.org/IMonitorService/OnClientTestSuiteTestCaseNamesChangeEventRespo" +
            "nse")]
        int OnClientTestSuiteTestCaseNamesChangeEvent(string strTestSuite, string strTestCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnClientTestCaseListChangeEvent", ReplyAction="http://tempuri.org/IMonitorService/OnClientTestCaseListChangeEventResponse")]
        int OnClientTestCaseListChangeEvent(TestServices.ServiceReference1.TestStep4Services[] lstTestSteps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnClientTestCompilerEndEvent", ReplyAction="http://tempuri.org/IMonitorService/OnClientTestCompilerEndEventResponse")]
        int OnClientTestCompilerEndEvent(bool isError, string strErrorInfo, TestServices.ServiceReference1.TestStep4Services[] objErrorInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnClientCompilerOneTestStepEvent", ReplyAction="http://tempuri.org/IMonitorService/OnClientCompilerOneTestStepEventResponse")]
        int OnClientCompilerOneTestStepEvent(TestServices.ServiceReference1.TestStep4Services objCurrentCompilerTestStep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnClientWriteCurrentLog", ReplyAction="http://tempuri.org/IMonitorService/OnClientWriteCurrentLogResponse")]
        int OnClientWriteCurrentLog(string strMessage, int iErrorOrNormal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/BeforeClientRunTestStepEvent", ReplyAction="http://tempuri.org/IMonitorService/BeforeClientRunTestStepEventResponse")]
        int BeforeClientRunTestStepEvent(TestServices.ServiceReference1.TestStep4Services objTestStepRunning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/AfterClientRunTestStepEvent", ReplyAction="http://tempuri.org/IMonitorService/AfterClientRunTestStepEventResponse")]
        int AfterClientRunTestStepEvent(TestServices.ServiceReference1.TestStep4Services objTestRunning, int iResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/RefreshGridStyle", ReplyAction="http://tempuri.org/IMonitorService/RefreshGridStyleResponse")]
        void RefreshGridStyle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/BeginAddLogHint", ReplyAction="http://tempuri.org/IMonitorService/BeginAddLogHintResponse")]
        void BeginAddLogHint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/EndAddLogHing", ReplyAction="http://tempuri.org/IMonitorService/EndAddLogHingResponse")]
        void EndAddLogHing();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/OnBreakPointsetEvent", ReplyAction="http://tempuri.org/IMonitorService/OnBreakPointsetEventResponse")]
        void OnBreakPointsetEvent(TestServices.ServiceReference1.TestStep4Services[] lstStepsInformation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceChannel : TestServices.ServiceReference1.IMonitorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitorServiceClient : System.ServiceModel.DuplexClientBase<TestServices.ServiceReference1.IMonitorService>, TestServices.ServiceReference1.IMonitorService {
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int OnClientTestSuiteTestCaseNamesChangeEvent(string strTestSuite, string strTestCase) {
            return base.Channel.OnClientTestSuiteTestCaseNamesChangeEvent(strTestSuite, strTestCase);
        }
        
        public int OnClientTestCaseListChangeEvent(TestServices.ServiceReference1.TestStep4Services[] lstTestSteps) {
            return base.Channel.OnClientTestCaseListChangeEvent(lstTestSteps);
        }
        
        public int OnClientTestCompilerEndEvent(bool isError, string strErrorInfo, TestServices.ServiceReference1.TestStep4Services[] objErrorInfo) {
            return base.Channel.OnClientTestCompilerEndEvent(isError, strErrorInfo, objErrorInfo);
        }
        
        public int OnClientCompilerOneTestStepEvent(TestServices.ServiceReference1.TestStep4Services objCurrentCompilerTestStep) {
            return base.Channel.OnClientCompilerOneTestStepEvent(objCurrentCompilerTestStep);
        }
        
        public int OnClientWriteCurrentLog(string strMessage, int iErrorOrNormal) {
            return base.Channel.OnClientWriteCurrentLog(strMessage, iErrorOrNormal);
        }
        
        public int BeforeClientRunTestStepEvent(TestServices.ServiceReference1.TestStep4Services objTestStepRunning) {
            return base.Channel.BeforeClientRunTestStepEvent(objTestStepRunning);
        }
        
        public int AfterClientRunTestStepEvent(TestServices.ServiceReference1.TestStep4Services objTestRunning, int iResult) {
            return base.Channel.AfterClientRunTestStepEvent(objTestRunning, iResult);
        }
        
        public void RefreshGridStyle() {
            base.Channel.RefreshGridStyle();
        }
        
        public void BeginAddLogHint() {
            base.Channel.BeginAddLogHint();
        }
        
        public void EndAddLogHing() {
            base.Channel.EndAddLogHing();
        }
    }
}
